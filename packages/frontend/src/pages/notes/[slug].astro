---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/header/Header.astro";
import Main from "@/components/main/Main.astro";

import { cy, isDevStage } from "@/utils";
import { Note } from "src/utils/models";

const { getToken } = Astro.locals.auth();
const token = await getToken();

const ASTRO_API_URL = process.env.ASTRO_API_URL as string;
let data: Array<Note>;
const resp = await fetch(`${ASTRO_API_URL}/notes`, {
    method: "GET",
    headers: {
        Authorization: `Bearer ${token}`,
    },
});

data = await resp.json();

const pages = data!.map(function (d: Note) {
    return {
        ...d,
        slug: d.noteId,
    };
});

const { slug } = Astro.params;
const page = pages.find((page) => page.slug === slug);
if (!page) return Astro.redirect("/404");
---

<Layout>
    <Header />
    <Main
        ><section>
            <header>
                <p>
                    date: {page.createdAt}
                    <a
                        {...cy("update-link")}
                        update-link
                        href={`/notes/${page.noteId}`}>update</a
                    >
                </p>
            </header>
            <main>
                <p id="contentElem" {...cy("content-specific-note")}>
                    {page.content}
                </p>
            </main>
        </section>
    </Main>
    {isDevStage ? <div style="display:none" id="devStage" /> : null}
</Layout>

<script>
    const updateLink = document.querySelector(
        "[update-link]",
    )! as HTMLAnchorElement;
    const contentElem = document.querySelector(
        "#contentElem",
    )! as HTMLParagraphElement;
    const main = contentElem.parentElement!;

    const observeFormInsertion = () => {
        const targetNode = main;

        const config = {
            childList: true,
            subtree: true,
        };

        const callback: MutationCallback = function (mutationsList) {
            for (const mutation of mutationsList) {
                if (mutation.type === "childList") {
                    mutation.addedNodes.forEach(function (node) {
                        if (
                            !(
                                node instanceof HTMLElement &&
                                node.hasAttribute("update-form")
                            )
                        ) {
                            return;
                        }
                        const form = node as HTMLFormElement;
                        form.addEventListener("submit", async function (event) {
                            event.preventDefault();

                            const contentInput = form.querySelector(
                                "#content",
                            ) as HTMLInputElement;
                            const newContent = contentInput.value;

                            console.log("Updating content to:", newContent);
                            const url = (form.action as string).split("/");
                            const uuid = url[url.length - 1];
                            const formData = new FormData(
                                form as HTMLFormElement,
                            );
                            const resp = await fetch(`/api/update/${uuid}`, {
                                method: "PUT",
                                body: formData,
                            });

                            if (resp.ok) {
                                window.location.href = `/notes/${uuid}`;
                            }
                        });
                    });
                }
            }
        };

        const observer = new MutationObserver(callback);
        observer.observe(targetNode, config);

        return observer;
    };

    observeFormInsertion();
    const isDevStage = document.querySelector("#devStage") ? true : false;
    updateLink.addEventListener("click", function (event) {
        event.preventDefault();
        console.log("~isDevStage:", isDevStage);
        if (isDevStage) {
            main.innerHTML = `<form update-form action="${updateLink.href}" method="PUT">
                <label for="content">new content</label>
                <input data-cy="update-form-content-field" type="text" id="content" name="content" value="${contentElem.innerText}">
                <input data-cy="update-form-submit" type="submit" >;
                </form>`;
            return;
        }
        main.innerHTML = `<form update-form action="${updateLink.href}" method="PUT">
            <label for="content">new content</label>
            <input type="text" id="content" name="content" value="${contentElem.innerText}">
            <input type="submit" >;
            </form>`;
    });
</script>
